import java.util.HashMap;
import java.util.Map;

public class CalculatorModel {
    private Map<String, Double> variables;

    public CalculatorModel() {
        this.variables = new HashMap<>();
    }

    public double calculate(String expression) {
        try {
            return new ExpressionParser().parse(expression);
        } catch (Exception e) {
            return Double.NaN;
        }
    }

    public double factorial(double n) {
        if (n < 0) {
            throw new IllegalArgumentException("Факториал не определен для отрицательных чисел");
        }
        double result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    public double log2(double x) {
        return Math.log(x) / Math.log(2);
    }

    public double exp(double x) {
        return Math.exp(x);
    }

    public double power(double base, double exponent) {
        return Math.pow(base, exponent);
    }
}
```

### Представление (View)

Представление отвечает за отображение данных. В данном случае, оно будет выводить результат расчёта уравнения.

```java
public class CalculatorView {
    public void displayResult(double result) {
        System.out.println("Результат: " + result);
    }
}
```

### Контроллер (Controller)

Контроллер отвечает за взаимодействие между моделью и представлением. Он будет принимать уравнение, передавать его модели для расчёта и затем отображать результат через представление.

```java
public class CalculatorController {
    private CalculatorModel model;
    private CalculatorView view;

    public CalculatorController(CalculatorModel model, CalculatorView view) {
        this.model = model;
        this.view = view;
    }

    public void calculateExpression(String expression) {
        double result = model.calculate(expression);
        view.displayResult(result);
    }
}
```

### Парсер выражений (ExpressionParser)

Парсер выражений будет использоваться для разбора и вычисления математических выражений.

```java
import java.util.Stack;

public class ExpressionParser {
    private static final String OPERATORS = "+-*/^";

    public double parse(String expression) {
        Stack<Double> values = new Stack<>();
        Stack<Character> operators = new Stack<>();

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            if (Character.isDigit(ch)) {
                StringBuilder sb = new StringBuilder();
                while (i < expression.length() && (Character.isDigit(expression.charAt(i)) || expression.charAt(i) == '.')) {
                    sb.append(expression.charAt(i++));
                }
                i--;
                values.push(Double.parseDouble(sb.toString()));
            } else if (ch == '(') {
                operators.push(ch);
            } else if (ch == ')') {
                while (!operators.isEmpty() && operators.peek() != '(') {
                    values.push(applyOperation(operators.pop(), values.pop(), values.pop()));
                }
                operators.pop(); // Remove '('
            } else if (OPERATORS.indexOf(ch) != -1) {
                while (!operators.isEmpty() && hasPrecedence(ch, operators.peek())) {
                    values.push(applyOperation(operators.pop(), values.pop(), values.pop()));
                }
                operators.push(ch);
            }
        }

        while (!operators.isEmpty()) {
            values.push(applyOperation(operators.pop(), values.pop(), values.pop()));
        }

        return values.pop();
    }

    private boolean hasPrecedence(char op1, char op2) {
        if (op2 == '(' || op2 == ')') {
            return false;
        }
        return ...
